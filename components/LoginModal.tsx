'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { useAuth } from '@/components/AuthProvider'
import { Loader2, X, Mail, Lock, Eye, EyeOff } from 'lucide-react'

interface LoginModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function LoginModal({ isOpen, onClose }: LoginModalProps) {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const { signIn, signUp } = useAuth()

  const resetForm = () => {
    setEmail('')
    setPassword('')
    setConfirmPassword('')
    setError('')
    setSuccess('')
    setShowPassword(false)
    setShowConfirmPassword(false)
  }

  const handleClose = () => {
    resetForm()
    onClose()
  }

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    if (!email || !password) {
      setError('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      setLoading(false)
      return
    }

    const { error } = await signIn(email, password)
    
    if (error) {
      // Supabase„ÅÆ„Ç®„É©„Éº„Ç≥„Éº„Éâ„Å®„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË©≥Á¥∞„Å´„ÉÅ„Çß„ÉÉ„ÇØ
      const errorMessage = error.message || ''
      const errorCode = (error as { code?: string })?.code || ''
      
      if (errorCode === 'email_not_confirmed' || errorMessage.includes('Email not confirmed') || errorMessage.includes('email_not_confirmed')) {
        setError('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅåÁ¢∫Ë™ç„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÁôªÈå≤ÊôÇ„Å´ÈÄÅ‰ø°„Åï„Çå„ÅüÁ¢∫Ë™ç„É°„Éº„É´„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ')
      } else if (errorCode === 'invalid_credentials' || errorMessage.includes('Invalid login credentials')) {
        setError('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ')
      } else if (errorCode === 'too_many_requests' || errorMessage.includes('too many requests')) {
        setError('„É≠„Ç∞„Ç§„É≥Ë©¶Ë°åÂõûÊï∞„Åå‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
      } else {
        setError(`„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${errorMessage || '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'}`)
      }
    } else {
      setSuccess('„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åó„ÅüÔºÅ')
      setTimeout(() => {
        handleClose()
      }, 1000)
    }
    
    setLoading(false)
  }

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    if (!email || !password || !confirmPassword) {
      setError('„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      setLoading(false)
      return
    }

    if (password !== confirmPassword) {
      setError('„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì')
      setLoading(false)
      return
    }

    if (password.length < 6) {
      setError('„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      setLoading(false)
      return
    }

    const { error } = await signUp(email, password)
    
    if (error) {
      const errorMessage = error.message || ''
      const errorCode = (error as { code?: string })?.code || ''
      
      if (errorCode === 'user_already_exists' || errorMessage.includes('already registered') || errorMessage.includes('User already registered')) {
        setError('„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô')
      } else if (errorCode === 'weak_password' || errorMessage.includes('Password should be')) {
        setError('„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂº±„Åô„Åé„Åæ„Åô„ÄÇ„Çà„ÇäÂº∑Âäõ„Å™„Éë„Çπ„ÉØ„Éº„Éâ„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      } else if (errorCode === 'invalid_email' || errorMessage.includes('Invalid email')) {
        setError('ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      } else {
        setError(`„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${errorMessage || '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'}`)
      }
    } else {
      setSuccess('„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅÁ¢∫Ë™ç„É°„Éº„É´„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ')
      setTimeout(() => {
        handleClose()
      }, 2000)
    }
    
    setLoading(false)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="relative bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
        <button
          onClick={handleClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10"
        >
          <X className="w-5 h-5" />
        </button>

        <Card className="border-0 shadow-none">
          <CardHeader className="text-center pb-4">
            <CardTitle className="text-2xl font-bold text-gray-900">
              üÉè MTG „Éó„É≠„Ç≠„Ç∑„É°„Éº„Ç´„Éº
            </CardTitle>
            <p className="text-sm text-gray-600">
              „Ç¢„Ç´„Ç¶„É≥„Éà„Åß„Éá„Éº„Çø„Çí‰øùÂ≠ò„ÉªÁÆ°ÁêÜ
            </p>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="signin" className="w-full">
              <TabsList className="grid w-full grid-cols-2 mb-6">
                <TabsTrigger value="signin">„É≠„Ç∞„Ç§„É≥</TabsTrigger>
                <TabsTrigger value="signup">Êñ∞Ë¶èÁôªÈå≤</TabsTrigger>
              </TabsList>

              <TabsContent value="signin">
                <form onSubmit={handleSignIn} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="signin-email">„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="signin-email"
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="example@email.com"
                        className="pl-10"
                        disabled={loading}
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="signin-password">„Éë„Çπ„ÉØ„Éº„Éâ</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="signin-password"
                        type={showPassword ? "text" : "password"}
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
                        className="pl-10 pr-10"
                        disabled={loading}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    </div>
                  </div>

                  {error && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                      <p className="text-sm text-red-600">{error}</p>
                    </div>
                  )}

                  {success && (
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <p className="text-sm text-green-600">{success}</p>
                    </div>
                  )}

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        „É≠„Ç∞„Ç§„É≥‰∏≠...
                      </>
                    ) : (
                      '„É≠„Ç∞„Ç§„É≥'
                    )}
                  </Button>
                </form>
              </TabsContent>

              <TabsContent value="signup">
                <form onSubmit={handleSignUp} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="signup-email">„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="signup-email"
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="example@email.com"
                        className="pl-10"
                        disabled={loading}
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="signup-password">„Éë„Çπ„ÉØ„Éº„Éâ</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="signup-password"
                        type={showPassword ? "text" : "password"}
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder="6ÊñáÂ≠ó‰ª•‰∏ä„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ"
                        className="pl-10 pr-10"
                        disabled={loading}
                        required
                        minLength={6}
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="signup-confirm-password">„Éë„Çπ„ÉØ„Éº„ÉâÁ¢∫Ë™ç</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="signup-confirm-password"
                        type={showConfirmPassword ? "text" : "password"}
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÜçÂÖ•Âäõ"
                        className="pl-10 pr-10"
                        disabled={loading}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                      >
                        {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    </div>
                  </div>

                  {error && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                      <p className="text-sm text-red-600">{error}</p>
                    </div>
                  )}

                  {success && (
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <p className="text-sm text-green-600">{success}</p>
                    </div>
                  )}

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê‰∏≠...
                      </>
                    ) : (
                      '„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê'
                    )}
                  </Button>
                </form>
              </TabsContent>
            </Tabs>

            <div className="mt-6 text-center">
              <p className="text-xs text-gray-500">
                „Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åô„Çã„Åì„Å®„Åß„ÄÅ„Ç´„Éº„Éâ„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„ÉªÁÆ°ÁêÜ„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}